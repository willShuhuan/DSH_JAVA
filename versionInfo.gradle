import groovy.xml.MarkupBuilder

/**
 * 版本发布文档自动维护脚本
 * 流程描述：1、请求本次版本相关信息
 *          2、将版本相关信息解析出来
 *          3、将解析出的数据生成xml格式数据
 *          4、写入到已有的文档数据中
 */
ext{
    versionName = rootProject.ext.android.versionName
    versionCode = rootProject.ext.android.versionCode
    versionInfo = 'App的第5个版本，又上了一些新功能'
    destFile = file('releases.xml')
    if(destFile!=null&&!destFile.exists()){
        destFile.createNewFile()
    }
}

//挂载自定义task到构建过程中
this.project.afterEvaluate {project ->
    def buildTask = project.tasks.getByName('build')
    if(buildTask == null){
        throw GradleExecption('the build task is not found')
    }
    buildTask.doLast{
        writeTask.execute()
    }
}

task writeTask{
    //为task指定输入
    inputs.property('versionCode',this.versionCode)
    inputs.property('versionName',this.versionName)
    inputs.property('versionInfo',this.versionInfo)
    //为task指定输出
    outputs.file destFile
    doLast{
        def data = inputs.getProperties()
        File file = outputs.getFiles().getSingleFile()
        //将data转化为实体对象
        def versionMsg = new VersionMsg(data)
        //将实体对象转化为xml格式数据
        def sw = new StringWriter()
        def xmlBuilder = new MarkupBuilder(sw)
        if (file.text !=null &&file.text.size()<=0){
            //文件中没有内容
            xmlBuilder.release{
                release{
                    versionCode(versionMsg.versionCode)
                    versionName(versionMsg.versionName)
                    versionInfo(versionMsg.versionInfo)
                }
            }
            file.withWriter {writer -> weiter.append(sw.toString())}
        }else{
            //已有版本信息
            xmlBuilder.release{
                versionCode(versionMsg.versionCode)
                versionName(versionMsg.versionName)
                versionInfo(versionMsg.versionInfo)
            }
            //将生成的xml数据插入到根节点之前
            def lines = file.readLines()
            def lengths = lines.size()-1
            file.withWriter {writer ->
                lines.eachWithIndex{ String line, int index ->
                    if(index !=lengths){
                        writer.append(line +"\r\n")
                    }else if(index == lengths){
                        writer.append("\r\n"+sw.toString()+"\r\n")
                        writer.append(lines.get(lengths))
                    }
                }
            }
        }
    }

}

task readTask{
    inputs.file destFile
    doLast{
        def file = inputs.files.singleFile
        println file.text
    }
}

class VersionMsg {
    String versionCode
    String versionInfo
    String versionName
}

task taskTest{
    dependsOn readTask,writeTask
    doLast{
        println '输入输出任务结束'
    }
}