/**
 * gradle 学习专用
 */

apply from: "config.gradle"
buildscript { ScriptHandler scriptHandler ->
    //配置工程的仓库地址
    repositories {
        google()
        jcenter()
//        maven{//配置maven仓库
//            name "${name}"
//            url   "${url}"
//             credentials {
//                 username = 'joe'
//                 password = 'secret'
//               }
//        }
    }
    //配置工程的"插件"依赖地址
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
    }
}

allprojects {
    group 'com.java.dsh'
    version '1.0.0-release'
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// 第三部分 project相关api讲解

//1. this.getProjects()
//
//def getProjects(){
//    println '----------'
//    println 'Root Project'
//    println '----------'
//    this.getAllprojects().eachWithIndex{ Project project, int index ->
//        if(index == 0){
//            println "Root project ':${project.name}'"
//        }else{
//            println "+--- project ':${project.name}'"
//        }
//    }
//}

//Terminal下 ./gradlew clean 命令

// module工程下获取父project
//2.this.getParentProject()
//def getParentProject(){
//    def name = this.getParent().name
//    println "the parent project name is:${name}"//the parent project name is:DSH_JAVA
//
//}


//3.this.getRootPro()
//def getRootPro(){
//    def name = this.getRootProject().name
//    println "the root project name is:${name}"//the root project name is:DSH_JAVA
//
//}

//4.通过project() 可以在根目录下为所有子工程进行配置
//project('app'){Project project ->
//    apply plugin:'com.android.application'
//    version '1.0.0-release'
//    group 'com.dsh'
//    android{}
//    dependencies {}
//}
//project('libmodule'){
//    apply plugin: 'com.android.library'
//    group 'com.dsh'
//    version '1.0.0-release'
//    android{}
//    dependencies {}
//}
//println project('libmodule').group//com.java.dsh

//5 subprojects() 子工程
//不包括当前节点工程，只包括它的subproject
//subprojects {
//    //子工程中的库工程推送到maven
//    if (project.plugins.hasPlugin('com.android.library')) {
//        apply from '../publishToMaven.gradle'
//    }
//}

//------------------------文件操作------------------------------------
//1. 获取路径
//println 'the root file path is:'+getRootDir().absolutePath
//println 'the build file path is:'+getBuildDir().absolutePath
//println 'the project file path is:'+getProjectDir().absolutePath

//2. file 定位文件
//println getContent('README.md')
//def getContent(String path){
//    try {
//        //file 定位一个文件 相对于当前的project工程开始查找无需传入绝对路径
//        def file = file(path)
//        return file.text
//    } catch (GradleException e) {
//        println 'file not found'
//    }
//}

//3. copy拷贝
//copy {
//    from file('Test.txt')
//    into getRootProject().getRootDir()
//}

//4. 对文件树进行遍历 以及拷贝
//fileTree('app/build/outputs/logs/'){FileTree fileTree ->
//    fileTree.visit {FileTreeElement element ->
//        println 'the file name is : '+element.file.name
//        copy {
//            from element.file
//            into getRootProject().getRootDir().path+'/test/'
//        }
//    }
//}

////5 执行外部命令
//task apkcopy(name:'apkcopy'){
//    doLast {
//        //gradle的阶段去执行
//        def sourcePath = getRootProject().getRootDir().path+'/app/build/outputs/apk'
//        def desationPath = getRootProject().getRootDir().path+'/test/'
//        def command = "mv -f ${sourcePath} ${desationPath}"
//        exec{
//            try {
//                executable 'bash'
//                args '-c',command
//                println 'the command is execute success'
//            } catch (GradleException e) {
//                println 'the command is execute failed'
//            }
//        }
//    }
//}